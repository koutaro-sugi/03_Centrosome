<!-- KSUGI -->
<!DOCTYPE html>
<html lang="en">
<head>
    <title>A1-Console</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="loader.css">
    <link rel="stylesheet" href="./app.css">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/@ungap/url-search-params"></script>
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="./aws-sdk-3.758.0-kvswebrtc.js"></script>
    <link rel="icon" type="image/png" href="favicon.ico">
    <style>
        /* Video container with fixed 16:9 aspect ratio */
        .video-wrapper {
            position: relative;
            width: 100%;
            padding-bottom: 56.25%; /* 16:9 aspect ratio */
            background-color: #000;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .video-content {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .video-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            font-size: 1.2rem;
            background-color: #212529;
        }
        
        .video-content video {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        
        .connection-status {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            display: inline-block;
        }
        .status-disconnected {
            background-color: #dc3545;
            color: white;
        }
        .status-connecting {
            background-color: #ffc107;
            color: #212529;
        }
        .status-connected {
            background-color: #28a745;
            color: white;
        }
        .viewer-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .viewer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .viewer-title {
            font-size: 1.25rem;
            font-weight: 500;
            margin: 0;
        }
        
        /* Accordion styling */
        .accordion .card-header {
            padding: 0.75rem 1.25rem;
            background-color: #f8f9fa;
            border-bottom: 1px solid rgba(0,0,0,.125);
        }
        
        .accordion .btn-link {
            color: #495057;
            text-decoration: none;
            font-weight: 500;
            display: block;
            width: 100%;
            text-align: left;
        }
        
        .accordion .btn-link:hover {
            color: #007bff;
            text-decoration: none;
        }
        
        .accordion .btn-link:focus {
            text-decoration: none;
            box-shadow: none;
        }
        
        .accordion .btn-link::after {
            content: 'â–¼';
            float: right;
            transition: transform 0.3s;
        }
        
        .accordion .btn-link.collapsed::after {
            transform: rotate(-90deg);
        }
        
        #logs {
            height: 400px;
            overflow: auto;
        }
    </style>
</head>
<body>

<div class="container-fluid mt-3">
    <div class="row loader"></div>
    <div id="main" class="d-none">
        <h1 class="mb-4">KVS WebRTC Multi-Viewer</h1>
        
        <div class="row">
            <!-- FPV Camera Viewer -->
            <div class="col-md-6 col-lg-6 mb-4">
                <div class="viewer-card">
                    <div class="viewer-header">
                        <h3 class="viewer-title">FPV Camera</h3>
                        <div>
                            <button id="fpv-connect-btn" class="btn btn-primary btn-sm">Connect</button>
                            <button id="fpv-disconnect-btn" class="btn btn-danger btn-sm d-none">Disconnect</button>
                        </div>
                    </div>
                    <div class="text-center mb-2">
                        <span class="connection-status status-disconnected" id="fpv-status">Disconnected</span>
                    </div>
                    <div class="video-wrapper">
                        <div class="video-content">
                            <div class="video-placeholder" id="fpv-placeholder">
                                <div>No video stream</div>
                            </div>
                            <video class="d-none" id="fpv-video" autoplay playsinline controls></video>
                        </div>
                    </div>
                    <small class="text-muted mt-2 d-block">Channel: usb-camera-channel</small>
                </div>
            </div>

            <!-- Payload Camera Viewer -->
            <div class="col-md-6 col-lg-6 mb-4">
                <div class="viewer-card">
                    <div class="viewer-header">
                        <h3 class="viewer-title">Payload Camera 1</h3>
                        <div>
                            <button id="payload-connect-btn" class="btn btn-primary btn-sm">Connect</button>
                            <button id="payload-disconnect-btn" class="btn btn-danger btn-sm d-none">Disconnect</button>
                        </div>
                    </div>
                    <div class="text-center mb-2">
                        <span class="connection-status status-disconnected" id="payload-status">Disconnected</span>
                    </div>
                    <div class="video-wrapper">
                        <div class="video-content">
                            <div class="video-placeholder" id="payload-placeholder">
                                <div>No video stream</div>
                            </div>
                            <video class="d-none" id="payload-video" autoplay playsinline controls></video>
                        </div>
                    </div>
                    <small class="text-muted mt-2 d-block">Channel: siyi-zr30-channel</small>
                </div>
            </div>
        </div>

        <!-- Accordion for Configuration and Logs -->
        <div class="accordion mt-4" id="controlAccordion">
            <!-- Configuration Accordion -->
            <div class="card">
                <div class="card-header" id="configHeading">
                    <h2 class="mb-0">
                        <button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#configCollapse" aria-expanded="false" aria-controls="configCollapse">
                            Configuration
                        </button>
                    </h2>
                </div>
                <div id="configCollapse" class="collapse" aria-labelledby="configHeading" data-parent="#controlAccordion">
                    <div class="card-body">
                        <form id="form" onsubmit="return false">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>KVS Endpoint</h5>
                                    <div class="form-group">
                                        <label for="region">Region</label>
                                        <input type="text" class="form-control valid" id="region" placeholder="Region" value="us-west-2" autocomplete="off" required>
                                        <datalist id="regionList"></datalist>
                                        <div id="region-invalid-feedback" class="invalid-feedback"></div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h5>AWS Credentials</h5>
                                    <div class="form-group">
                                        <label for="accessKeyId">Access Key ID</label>
                                        <input type="text" class="form-control" id="accessKeyId" placeholder="Access key id" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="secretAccessKey">Secret Access Key</label>
                                        <input type="password" class="form-control" id="secretAccessKey" placeholder="Secret access key" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="sessionToken">Session Token <small>(optional)</small></label>
                                        <input type="password" class="form-control" id="sessionToken" placeholder="Session token">
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Hidden inputs -->
                            <input type="hidden" id="clientId" value="">
                            <input type="hidden" id="natTraversalEnabled" value="true">
                            <input type="hidden" id="useTrickleICE" value="true">
                            <input type="hidden" id="sendVideo" value="false">
                            <input type="hidden" id="sendAudio" value="false">
                        </form>
                    </div>
                </div>
            </div>

            <!-- Logs Accordion -->
            <div class="card">
                <div class="card-header" id="logsHeading">
                    <h2 class="mb-0">
                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#logsCollapse" aria-expanded="true" aria-controls="logsCollapse">
                            Logs
                        </button>
                    </h2>
                </div>
                <div id="logsCollapse" class="collapse show" aria-labelledby="logsHeading" data-parent="#controlAccordion">
                    <div class="card-body">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                            <div id="tabs">
                                <button id="debug-button" class="btn btn-light btn-sm" onClick="logLevelSelected(event)" data-level="DEBUG">DEBUG</button>
                                <button id="info-button" class="btn btn-primary btn-sm" onClick="logLevelSelected(event)" data-level="INFO">INFO</button>
                                <button id="warn-button" class="btn btn-light btn-sm" onClick="logLevelSelected(event)" data-level="WARN">WARN</button>
                                <button id="error-button" class="btn btn-light btn-sm" onClick="logLevelSelected(event)" data-level="ERROR">ERROR</button>
                            </div>
                            <div class="d-inline-flex">
                                <button id="clear-logs" class="btn btn-light btn-sm">Clear Logs</button>
                                <button id="copy-logs" class="btn btn-light btn-sm ml-2" title="Copy logs">
                                    <span id="copy-tooltip" aria-live="assertive" class="text-info" role="tooltip" data-position="auto" title="Copied logs to clipboard!">ðŸ“‹</span>
                                </button>
                            </div>
                        </div>
                        <pre id="logs" class="bg-light p-3 text-monospace preserve-whitespace"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="./kvs-webrtc.js"></script>
<script src="./app.js"></script>
<script src="./channelHelper.js"></script>
<script src="./mediaHelper.js"></script>
<script src="./viewer.js"></script>

<script>
// Viewer management
const viewers = {
    fpv: {
        channelName: 'usb-camera-channel',
        viewerInstance: null,
        connected: false,
        clientId: null
    },
    payload: {
        channelName: 'siyi-zr30-channel',
        viewerInstance: null,
        connected: false,
        clientId: null
    }
};

// Store original functions
const originalStartViewer = window.startViewer;
const originalStopViewer = window.stopViewer;

// Connection status management
function updateConnectionStatus(viewerType, status) {
    const statusElement = document.getElementById(`${viewerType}-status`);
    const connectBtn = document.getElementById(`${viewerType}-connect-btn`);
    const disconnectBtn = document.getElementById(`${viewerType}-disconnect-btn`);
    const placeholder = document.getElementById(`${viewerType}-placeholder`);
    const video = document.getElementById(`${viewerType}-video`);
    
    statusElement.classList.remove('status-disconnected', 'status-connecting', 'status-connected');
    
    switch(status) {
        case 'disconnected':
            statusElement.textContent = 'Disconnected';
            statusElement.classList.add('status-disconnected');
            connectBtn.classList.remove('d-none');
            disconnectBtn.classList.add('d-none');
            placeholder.classList.remove('d-none');
            placeholder.innerHTML = '<div>No video stream</div>';
            video.classList.add('d-none');
            viewers[viewerType].connected = false;
            break;
        case 'connecting':
            statusElement.textContent = 'Connecting...';
            statusElement.classList.add('status-connecting');
            connectBtn.classList.add('d-none');
            disconnectBtn.classList.remove('d-none');
            placeholder.innerHTML = '<div class="spinner-border text-light" role="status"><span class="sr-only">Connecting...</span></div>';
            break;
        case 'connected':
            statusElement.textContent = 'Connected';
            statusElement.classList.add('status-connected');
            connectBtn.classList.add('d-none');
            disconnectBtn.classList.remove('d-none');
            placeholder.classList.add('d-none');
            video.classList.remove('d-none');
            viewers[viewerType].connected = true;
            break;
    }
}

// Start viewer for specific type
async function startViewerForType(viewerType) {
    const viewer = viewers[viewerType];
    if (viewer.connected) {
        console.log(`[VIEWER-${viewerType.toUpperCase()}] Already connected`);
        return;
    }
    
    console.log(`[VIEWER-${viewerType.toUpperCase()}] Starting viewer for channel:`, viewer.channelName);
    updateConnectionStatus(viewerType, 'connecting');
    
    // Generate unique client ID for this viewer
    viewer.clientId = Math.random().toString(36).substring(2).toUpperCase();
    
    // Get form values and override channel name and client ID
    const formValues = getFormValues();
    formValues.channelName = viewer.channelName;
    formValues.clientId = viewer.clientId;
    
    console.log(`[VIEWER-${viewerType.toUpperCase()}] Connecting with:`, {
        channelName: formValues.channelName,
        clientId: formValues.clientId
    });
    
    const remoteVideo = document.getElementById(`${viewerType}-video`);
    
    // Save viewer instance reference
    const originalViewer = window.viewer;
    
    try {
        await originalStartViewer(null, remoteVideo, formValues, onStatsReport, null);
        // Store the viewer instance
        viewer.viewerInstance = window.viewer;
        // Restore original viewer reference
        window.viewer = originalViewer;
    } catch (error) {
        console.error(`[VIEWER-${viewerType.toUpperCase()}] Error starting viewer:`, error);
        updateConnectionStatus(viewerType, 'disconnected');
    }
}

// Stop viewer for specific type
function stopViewerForType(viewerType) {
    const viewer = viewers[viewerType];
    if (!viewer.connected && !viewer.viewerInstance) {
        console.log(`[VIEWER-${viewerType.toUpperCase()}] Not connected`);
        return;
    }
    
    console.log(`[VIEWER-${viewerType.toUpperCase()}] Stopping viewer`);
    
    // Temporarily set the global viewer to the one we want to stop
    const originalViewer = window.viewer;
    window.viewer = viewer.viewerInstance;
    
    try {
        originalStopViewer();
        viewer.viewerInstance = null;
        viewer.clientId = null;
        updateConnectionStatus(viewerType, 'disconnected');
    } catch (error) {
        console.error(`[VIEWER-${viewerType.toUpperCase()}] Error stopping viewer:`, error);
    } finally {
        // Restore original viewer reference
        window.viewer = originalViewer;
    }
}

// Initialize event handlers
document.addEventListener('DOMContentLoaded', function() {
    console.log('[MULTI-VIEWER] Initializing multi-viewer');
    
    // FPV Camera controls
    document.getElementById('fpv-connect-btn').addEventListener('click', function() {
        startViewerForType('fpv');
    });
    
    document.getElementById('fpv-disconnect-btn').addEventListener('click', function() {
        stopViewerForType('fpv');
    });
    
    // Payload Camera controls
    document.getElementById('payload-connect-btn').addEventListener('click', function() {
        startViewerForType('payload');
    });
    
    document.getElementById('payload-disconnect-btn').addEventListener('click', function() {
        stopViewerForType('payload');
    });
    
    // Video event listeners
    const fpvVideo = document.getElementById('fpv-video');
    if (fpvVideo) {
        fpvVideo.addEventListener('loadeddata', function() {
            console.log('[VIEWER-FPV] Video data loaded');
            updateConnectionStatus('fpv', 'connected');
        });
    }
    
    const payloadVideo = document.getElementById('payload-video');
    if (payloadVideo) {
        payloadVideo.addEventListener('loadeddata', function() {
            console.log('[VIEWER-PAYLOAD] Video data loaded');
            updateConnectionStatus('payload', 'connected');
        });
    }
    
    // Initialize UI
    updateConnectionStatus('fpv', 'disconnected');
    updateConnectionStatus('payload', 'disconnected');
});

// Override onStop to handle both viewers
window.onStop = function() {
    console.log('[MULTI-VIEWER] Stopping all viewers');
    stopViewerForType('fpv');
    stopViewerForType('payload');
};

// Handle page unload
window.addEventListener('beforeunload', function() {
    onStop();
});
</script>

</body>
</html>