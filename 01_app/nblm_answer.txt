

MAVLinkの`NAV_CONTROLLER_OUTPUT`メッセージ（メッセージID: 62）のデコードに関するご質問について、提供されたソースに基づいて詳しく説明します。

### 1. ArduPilot特有のNAV_CONTROLLER_OUTPUTメッセージのフィールド定義

MAVLinkは、フライトスタックや地上局で標準的に実装されることが期待される定義を含むメッセージセットを管理しています。提供されたソースは、このMAVLinkの共通メッセージセット（common.xml）の定義を示しています。ArduPilotのようなMAVLink互換システムは、可能な限りこれらの標準定義を使用することが期待されています。

`NAV_CONTROLLER_OUTPUT`メッセージの各フィールドの標準MAVLink仕様は以下の通りです:

*   **`nav_roll`**: `float rad` (ロール角)
*   **`nav_pitch`**: `float rad` (ピッチ角)
*   **`nav_bearing`**: `int16_t deg` (現在の目標方位)
*   **`target_bearing`**: `int16_t deg` (現在のウェイポイント/ターゲットへの方位)
*   **`wp_dist`**: `uint16_t m` (アクティブなウェイポイントまでの距離)
*   **`alt_error`**: `float m` (現在の高度誤差)
*   **`aspd_error`**: `float m/s` (現在の対気速度誤差)
*   **`xtrack_error`**: `float m` (X-Y平面での現在のクロストラック誤差)

提供されたソースには、ArduPilotがこれらの標準定義から逸脱しているという具体的な情報はありません。したがって、ArduPilotはこれらの標準仕様に従ってメッセージを送信していると考えるのが妥当です。

### 2. ArduPilotでのbearing値のエンコーディング

ご提示の`nav_bearing` (`int16_t deg`) と `target_bearing` (`int16_t deg`) について、MAVLinkの他のメッセージの定義から推測されるエンコーディングの慣例が重要です。

*   **データ型と単位**: ソースでは両方とも `int16_t deg` と定義されています。`int16_t` は符号付き16ビット整数です。
*   **エンコーディングの慣例**: MAVLinkでは、`int16_t` や `uint16_t` の整数型で角度を表す場合、**センチ度 (centi-degrees, 1/100度)** でエンコードされる慣例があります。例えば、`GPS_RAW_INT`メッセージの`cog`（Course over ground）フィールドは`uint16_t cdeg`（degrees * 100）と明示されています。また、`GLOBAL_POSITION_INT`の`hdg`も同様に`uint16_t cdeg`です。さらに、`HIGH_LATENCY`メッセージの`roll`、`pitch`、`heading`、`heading_sp`フィールドは`int16_t cdeg`と明記されており、これは`int16_t`がセンチ度で使用されることを明確に示しています。
    `NAV_CONTROLLER_OUTPUT`の`nav_bearing`と`target_bearing`の単位が`deg`とだけ記載されていても、データ型が`int16_t`であることから、**センチ度として解釈するのが正しい**可能性が高いです。

    *   **計算例**:
        *   `nav_bearing`が`-10486`の場合、センチ度として解釈すると `-10486 / 100 = -104.86°` となります。
        *   `target_bearing`が`-17373`の場合、センチ度として解釈すると `-17373 / 100 = -173.73°` となります。

    これらの値は、通常の方位角の範囲（-180°から+180°）内に収まり、異常ではありません。この解釈が、デコード結果が期待と異なる問題を解決する鍵となります。

### 3. wp_distフィールドの仕様

*   **データ型と単位**: ソースによると、`wp_dist`フィールドは**`uint16_t m`** と明確に定義されています。
    *   `uint16_t`は符号なし16ビット整数です。したがって、値は0から65535までを取ります。
    *   単位はメートル（`m`）です。
*   **解釈**: 受信したRAWバイトデータ例で`wp_dist`が`32128`とデコードされた場合、これは単純に**32128メートル**、つまり32.128 kmを意味します。
    ご指摘の「32kmは明らかにおかしい」という点は、ミッションの内容やウェイポイント間の距離によっては十分にあり得る値です。また、`float32`として解釈すると負の値になるという observation は、`wp_dist`のデータ型が`uint16_t`であるため、誤った解釈です。
*   **ArduPilotのバージョンによる違い**: 提供されたソースには、ArduPilotのバージョンによって`wp_dist`の仕様が異なるという記述はありません。標準MAVLink定義は一般的に安定しており、特定のフライトスタックのバージョン間でメッセージの基本構造が大幅に変わることは稀です。

### 4. メッセージ構造の確認方法

*   **MAVLink XMLファイルでの定義**: 提供されたソースの大部分は、MAVLinkの共通メッセージセットのXML定義（`common.xml`）からの抜粋です。このファイルは、MAVLinkプロジェクトによって管理される「標準定義」を含んでいます。
*   **ArduPilotのソースコード**: MAVLink自体はプロトコル定義であり、特定のフライトスタック（ArduPilotなど）の実装の詳細は通常、そのフライトスタックのソースコードリポジトリで確認できます。提供されたソースには、ArduPilotの具体的なソースコードへのパスは含まれていません。ただし、MAVLink互換システムはこれらの共通定義を使用することが期待されているため、標準に従っているはずです。
*   **MAVLink XMLファイルでの定義との違い**: MAVLinkプロトコルは、MAVLinkプロジェクトが管理する標準定義を「標準」および「共通」メッセージセット（`standard.xml`、`common.xml`）として提供しています。これらのXMLファイルは、さまざまなフライトスタックや地上局で実装されるべき共通のメッセージ構造を定義しています。もしArduPilotがこれらの定義から逸脱している場合、それは「MAVLink標準外の変更点」であり、提供されたMAVLinkのドキュメントには記載されていません。

### 5. デバッグ方法

*   **Mission PlannerやQGroundControlでの値の確認**:
    *   **Mission Planner**や**QGroundControl**などの地上局ソフトウェアは、MAVLinkプロトコルをサポートするように設計されています。これらのソフトウェアは、MAVLinkメッセージを受信し、内部でデコードしてユーザーフレンドリーな形式（グラフ、数値表示、HUDなど）で表示します。
    *   もし、お使いのデコードロジックで`nav_bearing`や`target_bearing`がセンチ度として正しく処理されていない場合、Mission PlannerやQGroundControlで表示される値と比較することで、デコードロジックの正しさを検証できます。これらのGCSはMAVLinkの慣例に従ってデコードしていると期待できます。

*   **ArduPilotのパラメータによるメッセージフォーマットの変更**:
    *   MAVLinkプロトコルはメッセージの**構造とフィールドのフォーマット**をXMLで厳密に定義しています。特定のメッセージの**フォーマットそのものをパラメータで変更する機能**は、MAVLinkの設計思想からして通常は存在しません。これは、異なるコンポーネント間の互換性を保証するためです。
    *   ただし、MAVLinkには特定のメッセージの**送信レート**を設定するコマンド（`MAV_CMD_SET_MESSAGE_INTERVAL`）や、特定のメッセージを一度だけリクエストするコマンド（`MAV_CMD_REQUEST_MESSAGE`）は存在します。これにより、必要な情報を効率的にやり取りできます。提供されたソースには、メッセージフォーマット自体を変更するArduPilotのパラメータに関する情報はありません。

### まとめ

あなたのデコード問題の核心は、`nav_bearing`と`target_bearing`の`int16_t deg`フィールドが、MAVLinkの慣例に従い、**センチ度 (centi-degrees)** でエンコードされていると解釈することで解決する可能性が高いです。`wp_dist`は`uint16_t m`としてメートル単位で直接解釈されるべきです。これらの情報が、あなたがMAVLinkメッセージを正確にデコードするのに役立つことを願っています。